{"version":3,"sources":["NestListItems.js","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["NestListItems","props","nestlistitems","nestitems","map","nest","className","id","type","nestedkey","value","nestedtext","onChange","e","nestUpdate","target","key","icon","onClick","nestxdelete","duration","easing","ListItems","state","isActive","nestcurrentitem","handleNestedItem","bind","addnest","this","setState","Date","now","preventDefault","newnested","console","log","nestfilteredItems","filter","listitems","items","item","text","update","delete","onSubmit","placeholder","nestdelete","React","Component","library","add","faTrash","faPlus","App","currentItem","handleInput","addItem","newitem","filtered","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bcd9c45c.chunk.js","sourcesContent":["import React from 'react';\r\nimport'./NestListItems.css';\r\nimport FlipMove from 'react-flip-move';\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\n\r\nfunction NestListItems(props){\r\n    const nestedlist = props.nestitems;\r\n    \r\n    const nestlistitems = nestedlist.map(nest =>{\r\n        return <div className = \"nestedList\">\r\n            <form id = \"sublist\" >\r\n            <p>\r\n            <input type = \"text\" \r\n                id = {nest.nestedkey} \r\n                value = {nest.nestedtext}\r\n                onChange = {\r\n                    (e) =>{\r\n                        props.nestUpdate(e.target.value,nest.key)    \r\n                    }\r\n                }\r\n                />\r\n            <span>\r\n                <FontAwesomeIcon className = \"faiconsn\" icon = \"trash\"\r\n                onClick = {\r\n                    () => props.nestxdelete(nest.key)\r\n                }\r\n                />\r\n            </span>\r\n\r\n            </p>\r\n\r\n            </form>\r\n        </div>\r\n    })\r\n    return(\r\n        <div>\r\n            <FlipMove duration = {300} easing = \"ease-in-out\">\r\n            {nestlistitems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n    \r\n    \r\n    \r\n}\r\n\r\nexport default NestListItems;","import React from 'react';\r\nimport'./ListItems.css';\r\nimport App from './App'\r\nimport NestListItems from \"./NestListItems\"\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\n\r\n\r\n\r\nclass ListItems extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isActive :true,\r\n            nestitems:[],\r\n            nestcurrentitem: {\r\n                nestedtext:\"\",\r\n                nestedkey:\"\"\r\n            }\r\n        }\r\n        this.handleNestedItem = this.handleNestedItem.bind(this,);\r\n        this.addnest = this.addnest.bind(this,);\r\n    }\r\n    handleNestedItem(e){\r\n        this.setState({\r\n            nestcurrentitem:{\r\n                nestedtext: e.target.value,\r\n                nestedkey: Date.now()\r\n            }\r\n        })\r\n    }\r\n    addnest(e){\r\n        e.preventDefault();\r\n        const newnested= this.state.nestcurrentitem;\r\n        console.log(newnested);\r\n        if(newnested.nestedtext!==\"\"){\r\n            const nestitems =[...this.state.nestitems, newnested];\r\n            this.setState({\r\n              nestitems: nestitems,\r\n              nestcurrentitem:{\r\n                nestedtext:\"\",\r\n                nestedkey:\"\"\r\n              },\r\n              \r\n            })\r\n          }\r\n          \r\n    }\r\n    nestUpdate(nestedtext,nestedkey){\r\n        const nestitems = this.state.nestitems;\r\n        nestitems.map(nest =>{\r\n        if(nest.nestedkey ===nestedkey){\r\n            nest.nestedtext=nestedtext;\r\n            }\r\n        })\r\n        this.setState({\r\n        nestitems: nestitems\r\n            })\r\n        \r\n        }\r\n    nestdelete(nestedkey){\r\n        const nestfilteredItems = this.state.nestitems.filter(nest =>\r\n            nest.nestedkey!==nestedkey);\r\n            this.setState({\r\n              nestitems: nestfilteredItems,\r\n            })\r\n            \r\n        }\r\n    \r\n    render(){\r\n        const items = this.props.items;\r\n        const listitems = items.map(item => {\r\n            return <div className = \"list\" key = \"item.key\">\r\n            <p>\r\n                <input type = \"text\" value = {item.text}\r\n                id = {item.key}\r\n                onChange = {\r\n                    (e) => {this.props.update(e.target.value,item.key)}\r\n                }\r\n                />\r\n                <span>\r\n                <FontAwesomeIcon className = \"faicons\" icon = \"trash\"\r\n                onClick = {\r\n                    () => this.props.delete(item.key)\r\n                }\r\n                />\r\n            </span>\r\n            \r\n\r\n            </p>\r\n            \r\n            <div>\r\n            <form id = \"subtask\" onSubmit = {this.addnest}>\r\n            <input type = \"text\" placeholder =\"subtasks to do..\"\r\n                value = {this.state.nestcurrentitem.nestedtext}\r\n                onChange = {this.handleNestedItem}\r\n                      \r\n                \r\n             />\r\n             <button>add</button>\r\n        </form>\r\n        <NestListItems\r\n            nestitems = {this.state.nestitems}\r\n            nestUpdate = {this.nestUpdate.bind(this, )}\r\n            nestdelete = {this.nestdelete.bind(this,)}\r\n            >\r\n                \r\n            </NestListItems>  \r\n            </div>\r\n            \r\n\r\n            \r\n                \r\n                \r\n            \r\n            \r\n            \r\n            \r\n        </div>\r\n        })\r\n        return(\r\n            <div>\r\n            <FlipMove duration = {300} easing = \"ease-in-out\">\r\n            {listitems}\r\n            </FlipMove>\r\n                \r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\nexport default ListItems;","import React from 'react';\nimport ListItems from \"./ListItems\"\n\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nimport {faPlus} from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(faTrash);\nlibrary.add(faPlus);\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      currentItem:{\n        text:\"\",\n        key:\"\"\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n\n    \n  }\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  \n  \n  addItem(e){\n    e.preventDefault();\n    const newitem = this.state.currentItem;\n    console.log(newitem);\n    if(newitem.text!==\"\"){\n      const items = [...this.state.items, newitem];\n      this.setState({\n        items: items,\n        currentItem :{\n          text:\"\",\n          key:\"\"\n        }\n      })\n    }\n    \n  }\n\n  update(text,key){\n    const items = this.state.items;\n    items.map(item =>{\n      if(item.key ===key){\n        item.text=text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n\n    \n  }\n  delete(key){\n    const filtered = this.state.items.filter(item => item.key!==key);\n    this.setState({\n      items: filtered\n    })\n  }\n\n  render(){\n    return (\n      \n      <div className=\"App\">\n        <p>TO DO LIST</p>\n        <header>\n          \n          <form id = \"to-do\" onSubmit = {this.addItem}>\n            <input type = \"text\" placeholder = \"work to do...\"\n            value = {this.state.currentItem.text}\n            onChange = {this.handleInput}\n\n            />\n            <button type =\"submit\">add</button>\n          </form>\n        </header>\n        <ListItems\n          items = {this.state.items}\n          update = {this.update.bind(this, )}\n          delete = {this.delete.bind(this,)}\n        >\n\n        </ListItems>\n\n  \n        \n        \n        \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}